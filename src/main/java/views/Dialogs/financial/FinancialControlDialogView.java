/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package views.Dialogs.financial;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import models.AccountDTO;
import models.MovementAccountDTO;
import models.UserDTO;
import services.AccountService;
import services.FinancialService;

/**
 *
 * @author Willian
 */
public class FinancialControlDialogView extends javax.swing.JDialog {
    
    private UserDTO user;

    /**
     * Creates new form FinancialControlDialogView
     */
    public FinancialControlDialogView(java.awt.Frame parent, boolean modal, UserDTO session_user) {
        super(parent, modal);
        user = session_user;
        initComponents();
        initAccountsToBox();
    }

    private FinancialControlDialogView(JFrame jFrame, boolean b) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        box_accounts = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        box_tipo = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        input_new_valor = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Movimentações Financeiras ");

        jLabel2.setText("Escolha a Conta:");

        box_accounts.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione" }));

        jLabel3.setText("Escolha a Operação:");

        box_tipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione" ,"Depósito", "Saque" }));

        jLabel5.setText("Valor do Depósito / Saque:");

        jButton1.setText("Executar Operação !!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        input_new_valor.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#.00"))));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(box_accounts, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(136, 136, 136)
                            .addComponent(jLabel1))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(50, 50, 50)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel3)
                                        .addComponent(box_tipo, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(98, 98, 98)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5)
                                        .addComponent(input_new_valor)))))))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addGap(46, 46, 46)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(box_accounts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(input_new_valor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(box_tipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(29, 29, 29))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String valor = input_new_valor.getText().trim();
        Double new_balance;
        if (!valor.isEmpty() && box_accounts.getSelectedIndex() != 0 && box_tipo.getSelectedIndex() != 0){
            Double price = Double.parseDouble(valor.replace(",", "."));
            int id_account = ids_accounts.get(box_accounts.getSelectedIndex() - 1);
            String tipo = (String) box_tipo.getSelectedItem();
            MovementAccountDTO movement = new MovementAccountDTO();
            movement.setAccount_id(id_account);
            movement.setTypeMovement(tipo);
            movement.setPrice(price);
            movement.setUser_id(user.getId());
            AccountDTO conta_selected = map_accounts.get(id_account);
            boolean valid = validMovement(conta_selected.getBalance(), price, tipo);
            if(valid){
                try {
                    if (tipo.equals("Depósito")){
                        new_balance = conta_selected.getBalance() + price;
                    }else{
                        new_balance = conta_selected.getBalance() - price;
                    }
                    FinancialService service = new FinancialService();
                    service.createNewMovement(movement, new_balance);
                    JOptionPane.showMessageDialog(null, "Operação Concluída !!");
                    dispose();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Erro Cadastrar Movimento: " + ex);
                }
            }else{
                JOptionPane.showMessageDialog(null, "Você não tem Saldo Suficiente nesta conta para Esta Operação");
            }
        }else{
            JOptionPane.showMessageDialog(null, "Preencha Corretamente o Formulário");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FinancialControlDialogView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FinancialControlDialogView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FinancialControlDialogView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FinancialControlDialogView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FinancialControlDialogView dialog = new FinancialControlDialogView(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> box_accounts;
    private javax.swing.JComboBox<String> box_tipo;
    private javax.swing.JFormattedTextField input_new_valor;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables

    Vector<Integer> ids_accounts = new Vector<Integer>();
    Map<Integer, AccountDTO> map_accounts = new HashMap<Integer, AccountDTO>();
    
    private void initAccountsToBox() {
        AccountService service = new AccountService();
        try {
            ArrayList<AccountDTO> account_list = service.getAllAccountsToFinancial(user.getId());
            
            for (int i = 0; i < account_list.size(); i++ ){
                int id_account = account_list.get(i).getId();
                String name_broker = account_list.get(i).getNumber_account();
                ids_accounts.addElement(id_account);
                box_accounts.addItem(name_broker);
                map_accounts.put(id_account, account_list.get(i));
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro Ao Listar Contas: " + ex);
        }
    }
    
    private boolean validMovement(Double balance, Double price, String tipo_operacao){
        if (tipo_operacao.equals("Saque") && price > balance){
            return false;
        }
        return true;
    }
}
